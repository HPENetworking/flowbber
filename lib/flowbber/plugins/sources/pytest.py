# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 KuraLabs S.R.L
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""

Pytest
======

This source parses the JUnit like results XML file generated by pytest_.

.. _pytest: https://docs.pytest.org/


**Data collected:**

.. code-block:: json

    {
        "suites": {
            "<suite_name>": {
                "errors": 0,
                "failures": 2,
                "skips": 0,
                "tests": 4,
                "time": 0.047,
                "cases": {
                    "<classname>.<name>": {
                        "file": "test/test_file.py",
                        "line": 19,
                        "classname": "test.test_file",
                        "name": "test_function",
                        "time": 0.0012459754943847656,
                        "properties": [
                            {"<propname1>": "<propvalue1>"},
                            {"<propname2>": "<propvalue2>"}
                        ]
                    }
                }
            }
        }
    }

**Dependencies:**

.. code-block:: sh

    pip3 install flowbber[cobertura]

**Usage:**

.. code-block:: json

    {
        "sources": [
            {
                "type": "pytest",
                "id": "...",
                "config": {
                    "xmlpath": "tests.xml"
                }
            }
        ]
    }

xmlpath
-------

Path to the JUnit like XML results ``tests.xml`` file to be parsed.

- **Default**: ``N/A``
- **Optional**: ``False``
- **Schema**:

  .. code-block:: python3

     {
         'type': 'string',
         'empty': False,
     }

- **Secret**: ``False``

"""  # noqa

from pathlib import Path
from xml.etree import ElementTree
from collections import OrderedDict

from flowbber.components import Source


def trycast(value):
    """
    Try to cast a string attribute from an XML tag to an integer, then to a
    float. If both fails, return the original string.
    """
    for cast in (int, float):
        try:
            return cast(value)
        except ValueError as e:
            continue
    return value


class PytestSource(Source):

    def declare_config(self, config):
        config.add_option(
            'xmlpath',
            schema={
                'type': 'string',
                'empty': False,
            },
        )

    def collect(self):
        # Check if file exists
        infile = Path(self.config.xmlpath.value)
        if not infile.is_file():
            raise FileNotFoundError(
                'No such file {}'.format(infile)
            )

        data = {}

        tree = ElementTree.parse(str(infile))
        root = tree.getroot()
        assert root.tag == 'testsuite', 'Malformed XML root element'

        # Create top level suite object
        testsuite = {
            key: cast(root.attrib[key])
            for key, cast in [
                ('errors', int),
                ('failures', int),
                ('skips', int),
                ('tests', int),
                ('time', float),
            ]
        }

        testcases = OrderedDict()
        testsuite['cases'] = testcases

        data[root.attrib['name']] = testsuite

        # Add test cases
        for child in root:
            assert child.tag == 'testcase', 'Malformed XML child element'
            testcase = {
                key: cast(child.attrib[key])
                for key, cast in [
                    ('file', str),
                    ('line', int),
                    ('classname', str),
                    ('name', str),
                    ('time', float),
                ]
            }

            properties = []
            testcase['properties'] = properties

            tckey = '{}.{}'.format(
                child.attrib['classname'],
                child.attrib['name']
            )
            testcases[tckey] = testcase

            # Add properties
            for subchild in child.find('properties'):
                assert subchild.tag == 'property', \
                    'Malformed XML subchild element'

                properties.append({
                    subchild.attrib['name']: trycast(subchild.attrib['value'])
                })

            # Add failures
            failure = child.find('failure')
            if failure is not None:
                testcase['failure'] = {
                    'message': failure.attrib['message'],
                    'code': failure.text,
                }

        return data


__all__ = ['PytestSource']
